generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  VENDOR
  COURIER
  ADMIN
}

model User {
  userId      Int           @id @default(autoincrement())
  firstName   String        @db.VarChar(50)
  lastName    String        @db.VarChar(100)
  phoneNumber String
  email       String        @unique @db.VarChar(100)
  password    String
  role        Role          @default(CUSTOMER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  addresses   UserAddress[]
}

model Permission {
  permissionId   Int              @id @default(autoincrement())
  name           String           @unique
  RolePermission RolePermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model RolePermission {
  rolePermissionId Int        @id @default(autoincrement())
  role             Role
  permission       Permission @relation(fields: [permissionId], references: [permissionId])
  permissionId     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

enum UserAddressType {
  HOME
  OFFICE
  OTHER
}

model UserAddress {
  userAddressId  Int             @id @default(autoincrement())
  userId         Int
  buildingNumber String          @db.VarChar(50)
  floorNumber    String          @db.VarChar(50)
  apartment      String          @db.VarChar(500)
  area           String          @db.VarChar(500)
  nearbyLandmark String          @db.VarChar(200)
  city           String          @db.VarChar(100)
  state          String          @db.VarChar(100)
  postalCode     Int
  country        String          @db.VarChar(100)
  addressType    UserAddressType @default(HOME)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [userId])
}

model Cuisine {
  cuisineId   Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(100)
  description String       @db.VarChar(500)
  image       String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model OpeningDay {
  id           Int        @id @default(autoincrement())
  day          String
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
}

model Restaurant {
  restaurantId        Int                 @id @default(autoincrement())
  userId              Int
  restaurantName      String              @db.VarChar(200)
  ownerName           String              @db.VarChar(200)
  ownerEmail          String              @unique @db.VarChar(100)
  ownerPhoneNumber    String
  restaurantImage     String
  cuisines            Cuisine[]
  openingDays         OpeningDay[]
  isPureVeg           Boolean             @default(false)
  priceForTwo         Int
  deliveryTime        Int
  totalReviews        Int                 @default(0)
  ratings             Float               @default(0)
  openingTime         String
  closingTime         String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  menu                Menu[]
  addresses           RestaurantAddress[]
  restaurantAddressId Int
}

model RestaurantAddress {
  restaurantAddressId Int        @id @default(autoincrement())
  restaurantId        Int
  buildingNumber      String     @db.VarChar(50)
  floorNumber         String     @db.VarChar(50)
  area                String     @db.VarChar(500)
  nearbyLandmark      String     @db.VarChar(200)
  city                String     @db.VarChar(100)
  state               String     @db.VarChar(100)
  postalCode          Int
  country             String     @db.VarChar(100)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now())
  restaurant          Restaurant @relation(fields: [restaurantId], references: [restaurantId])
}

model Menu {
  menuId       Int        @id @default(autoincrement())
  restaurantId Int
  menuName     String     @db.VarChar(200)
  description  String     @db.VarChar(500)
  isActive     Boolean    @default(false)
  menuItems    MenuItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
}

enum ItemCategory {
  MAIN_COURSE
  APPETIZER
  DESSERT
  BEVERAGE
  SIDE
}

model MenuItem {
  itemId          Int          @id @default(autoincrement())
  menuId          Int
  itemName        String       @db.VarChar(200)
  itemDescription String       @db.VarChar(500)
  quantity        Int          @default(0)
  isVeg           Boolean      @default(false)
  isBestSeller    Boolean      @default(false)
  itemImage       String
  totalReviews    Int          @default(0)
  ratings         Float        @default(0)
  itemCategory    ItemCategory
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  menu            Menu         @relation(fields: [menuId], references: [menuId])
}

//
// model Cart {
//   cartId       Int        @id @default(autoincrement())
//   userId       Int
//   restaurantId Int
//   items        MenuItem[] // add quantity
//   totalPrice   Int        @default(0)
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @default(now())
// }
//
// model OrderedItem {
//   orderItemId  Int      @id @default(autoincrement())
//   orderId      Int
//   menuItemId   Int
//   quantity     Int      @default(1)
//   totalPrice   Float
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now())
//   Order        Order?   @relation(fields: [orderOrderId], references: [orderId])
//   orderOrderId Int?
// }
//
// // understand why payment pe orderId map hota hai ?
// model Order {
//   orderId      Int           @id @default(autoincrement())
//   customerId   Int
//   restaurantId Int
//   courierId    Int
//   orderedItems OrderedItem[]
//   orderStatus  OrderStatus   @default(PENDING)
//   createdAt    DateTime      @default(now())
//   User         User?         @relation(fields: [userUserId], references: [userId])
//   userUserId   Int?
// }
//
// model Payment {
//   paymentId     Int           @id @default(autoincrement())
//   userId        Int
//   totalAmount   Int
//   orderId       Int
//   paymentStatus PaymentStatus @default(PENDING)
//   createdAt     DateTime      @default(now())
// }
//
// // orderStatus humesha order model mai hoga
// model OrderTracking {
//   trackingId     Int            @id @default(autoincrement())
//   orderId        Int
//   orderStatus    OrderStatus
//   trackingStatus TrackingStatus
//   updatedAt      DateTime       @default(now())
// }
//
// model Review {
//   reviewId     Int       @id @default(autoincrement())
//   rating       Float     @default(0)
//   review       String    @db.VarChar(500)
//   userId       Int
//   restaurantId Int
//   comments     Comment[]
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @default(now())
// }
//
// // parentCommentId
// model Comment {
//   commentId Int      @id @default(autoincrement())
//   reviewId  Int
//   comment   String   @db.VarChar(500)
//   userId    Int
//   replies   Reply[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
//   review    Review   @relation(fields: [reviewId], references: [reviewId])
// }
//
// model Reply {
//   replyId   Int      @id @default(autoincrement())
//   commentId Int
//   reply     String   @db.VarChar(500)
//   userId    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
//   comment   Comment  @relation(fields: [commentId], references: [commentId])
// }
//
// model Notifications {
//   notificationId     Int                @id @default(autoincrement())
//   userId             Int
//   message            String             @db.VarChar(200)
//   notificationStatus NotificationStatus
//   notificationType   NotificationType
//   createdAt          DateTime           @default(now())
//   customer           User?              @relation("CustomerNotifications", fields: [userId], references: [userId])
//   vendor             User?              @relation("VendorNotifications", fields: [userId], references: [userId])
//   courier            User?              @relation("CourierNotifications", fields: [userId], references: [userId])
// }

//
// enum PaymentStatus {
//   PENDING
//   SUCCESS
//   FAILED
// }
//
// enum OrderStatus {
//   PENDING
//   COMPLETED
//   CANCELLED
// }
//
// enum TrackingStatus {
//   Dispatched
//   IN_TRANSIT
//   DELIVERED
// }
//
// enum CourierStatus {
//   AVAILABLE
//   BUSY
//   OFFLINE
// }
//
// enum NotificationStatus {
//   UNREAD
//   READ
// }
//
// enum NotificationType {
//   ORDER_UPDATE
//   PROMOTION
//   GENERAL
// }
