
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  userAddressId: 'userAddressId',
  userId: 'userId',
  buildingNumber: 'buildingNumber',
  floorNumber: 'floorNumber',
  apartment: 'apartment',
  area: 'area',
  nearbyLandmark: 'nearbyLandmark',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  addressType: 'addressType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  permissionId: 'permissionId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  rolePermissionId: 'rolePermissionId',
  role: 'role',
  permissionId: 'permissionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CuisineScalarFieldEnum = {
  cuisineId: 'cuisineId',
  name: 'name',
  description: 'description',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopBrandScalarFieldEnum = {
  topBrandId: 'topBrandId',
  image: 'image',
  name: 'name'
};

exports.Prisma.OpeningDayScalarFieldEnum = {
  openingDayId: 'openingDayId',
  day: 'day',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RestaurantScalarFieldEnum = {
  restaurantId: 'restaurantId',
  userId: 'userId',
  restaurantName: 'restaurantName',
  ownerName: 'ownerName',
  ownerEmail: 'ownerEmail',
  ownerPhoneNumber: 'ownerPhoneNumber',
  buildingNumber: 'buildingNumber',
  floorNumber: 'floorNumber',
  area: 'area',
  city: 'city',
  nearbyLandmark: 'nearbyLandmark',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  restaurantImage: 'restaurantImage',
  openingTime: 'openingTime',
  closingTime: 'closingTime',
  isPureVeg: 'isPureVeg',
  priceForTwo: 'priceForTwo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuScalarFieldEnum = {
  menuId: 'menuId',
  restaurantId: 'restaurantId',
  menuName: 'menuName',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  itemId: 'itemId',
  menuId: 'menuId',
  itemName: 'itemName',
  itemPrice: 'itemPrice',
  quantity: 'quantity',
  itemDescription: 'itemDescription',
  isPureVeg: 'isPureVeg',
  isBestSeller: 'isBestSeller',
  itemImage: 'itemImage',
  itemCategory: 'itemCategory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  orderId: 'orderId',
  userId: 'userId',
  restaurantId: 'restaurantId',
  deliveryPartnerId: 'deliveryPartnerId',
  totalPrice: 'totalPrice',
  orderStatus: 'orderStatus',
  deliveryTime: 'deliveryTime',
  userAddress: 'userAddress',
  restaurantAddress: 'restaurantAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  orderItemId: 'orderItemId',
  orderId: 'orderId',
  menuItemId: 'menuItemId',
  quantity: 'quantity',
  itemPrice: 'itemPrice',
  totalPrice: 'totalPrice'
};

exports.Prisma.RatingScalarFieldEnum = {
  ratingId: 'ratingId',
  orderId: 'orderId',
  userId: 'userId',
  ratingType: 'ratingType',
  targetId: 'targetId',
  rating: 'rating',
  review: 'review',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  commentId: 'commentId',
  ratingId: 'ratingId',
  userId: 'userId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReplyScalarFieldEnum = {
  replyId: 'replyId',
  commentId: 'commentId',
  userId: 'userId',
  reply: 'reply',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  VENDOR: 'VENDOR',
  COURIER: 'COURIER',
  ADMIN: 'ADMIN'
};

exports.UserAddressType = exports.$Enums.UserAddressType = {
  HOME: 'HOME',
  OFFICE: 'OFFICE',
  OTHER: 'OTHER'
};

exports.ItemCategory = exports.$Enums.ItemCategory = {
  MAIN_COURSE: 'MAIN_COURSE',
  APPETIZER: 'APPETIZER',
  DESSERT: 'DESSERT',
  BEVERAGE: 'BEVERAGE',
  SIDE: 'SIDE'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  IN_PROGRESS: 'IN_PROGRESS',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  ON_THE_WAY: 'ON_THE_WAY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.RatingType = exports.$Enums.RatingType = {
  RESTAURANT: 'RESTAURANT',
  MENUITEM: 'MENUITEM',
  DELIVERY_PARTNER: 'DELIVERY_PARTNER'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserAddress: 'UserAddress',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  Cuisine: 'Cuisine',
  TopBrand: 'TopBrand',
  OpeningDay: 'OpeningDay',
  Restaurant: 'Restaurant',
  Menu: 'Menu',
  MenuItem: 'MenuItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Rating: 'Rating',
  Comment: 'Comment',
  Reply: 'Reply'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
