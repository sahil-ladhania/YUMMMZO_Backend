generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  CUSTOMER
  VENDOR
  COURIER
  ADMIN
}

enum UserAddressType {
  HOME
  OFFICE
  OTHER
}

enum ItemCategory {
  MAIN_COURSE
  APPETIZER
  DESSERT
  BEVERAGE
  SIDE
}

enum OrderStatus {
  PENDING       
  ACCEPTED      
  REJECTED      
  IN_PROGRESS
  OUT_FOR_DELIVERY 
  ON_THE_WAY
  DELIVERED    
  CANCELLED    
}

enum RatingType {
  RESTAURANT
  MENUITEM
  DELIVERY_PARTNER
}

// Models

model User {
  userId      Int           @id @default(autoincrement())
  firstName   String        @db.VarChar(50)
  lastName    String        @db.VarChar(100)
  phoneNumber String
  email       String        @unique @db.VarChar(100)
  password    String
  role        Role          @default(CUSTOMER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  addresses   UserAddress[] // Relation - User can have multiple addresses
  orders      Order[]       // Relation - User can place multiple orders
  deliveries  Order[]       @relation("DeliveryPartner") // Relation - User can deliver multiple orders (if role = DELIVERY_PARTNER)
  ratings     Rating[]      // Relation - User can give multiple ratings
  comments    Comment[]     // Relation - User can write multiple comments
  replies     Reply[]       // Relation - User can write multiple replies
}

model UserAddress {
  userAddressId  Int             @id @default(autoincrement())
  userId         Int
  buildingNumber String          @db.VarChar(50)
  floorNumber    String          @db.VarChar(50)
  apartment      String          @db.VarChar(500)
  area           String          @db.VarChar(500)
  nearbyLandmark String          @db.VarChar(200)
  city           String          @db.VarChar(100)
  state          String          @db.VarChar(100)
  postalCode     Int
  country        String          @db.VarChar(100)
  addressType    UserAddressType @default(HOME)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [userId]) // Relation - Each address belongs to one user
}

model Permission {
  permissionId   Int              @id @default(autoincrement())
  name           String           @unique
  RolePermission RolePermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model RolePermission {
  rolePermissionId Int        @id @default(autoincrement())
  role             Role
  permission       Permission @relation(fields: [permissionId], references: [permissionId])
  permissionId     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Cuisine {
  cuisineId   Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(100)
  description String       @db.VarChar(500)
  image       String
  restaurants Restaurant[] @relation("CuisineOnRestaurant") // Relation - A cuisine can belong to multiple restaurants
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model TopBrand {
  topBrandId Int @id @default(autoincrement())
  image String
  name String 
}

model OpeningDay {
  openingDayId           Int        @id @default(autoincrement())
  day          String
  restaurants Restaurant[] @relation("RestaurantOpeningDays") // Relation - A day can belong to multiple restaurants
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Restaurant {
  restaurantId     Int                @id @default(autoincrement())
  userId           Int
  restaurantName   String             @unique @db.VarChar(200)
  ownerName        String             @db.VarChar(200)
  ownerEmail       String             @unique @db.VarChar(100)
  ownerPhoneNumber String
  buildingNumber      String     @db.VarChar(50)
  floorNumber         String     @db.VarChar(50)
  area                String     @db.VarChar(500)
  city                String     @db.VarChar(100)
  nearbyLandmark      String     @db.VarChar(200)
  state               String     @db.VarChar(100)
  postalCode          String
  country             String     @db.VarChar(100)
  restaurantImage  String
  cuisines         Cuisine[]          @relation("CuisineOnRestaurant") // Relation - A restaurant can have multiple cuisines
  openingTime      String
  closingTime      String
  openingDays      OpeningDay[] @relation("RestaurantOpeningDays") // Relation - A restaurant can be open on multiple days
  isPureVeg        Boolean            @default(false)
  priceForTwo      Int
  menu             Menu[]             // Relation - A restaurant can have multiple menus
  orders           Order[]            // Relation - A restaurant can have multiple orders
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
}

model Menu {
  menuId       Int        @id @default(autoincrement())
  restaurantId Int
  menuName     String     @db.VarChar(200)
  description  String     @db.VarChar(500)
  isActive     Boolean    @default(false)
  menuItems    MenuItem[] // Relation - Menu can have multiple menu items
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId]) // Relation - Menu belongs to one restaurant
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  @@unique([restaurantId , menuName])
}

model MenuItem {
  itemId          Int          @id @default(autoincrement())
  menuId          Int
  itemName        String       @db.VarChar(200)
  itemPrice       Int          @default(0)
  quantity        Int          @default(0)
  itemDescription String       @db.VarChar(500)
  isPureVeg       Boolean      @default(false)
  isBestSeller    Boolean      @default(false)
  itemImage       String
  itemCategory    ItemCategory
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  menu            Menu         @relation(fields: [menuId], references: [menuId], onDelete: Cascade) // Relation - MenuItem belongs to one menu
  orderItems      OrderItem[]  // Relation - A menu item can appear in multiple orders
}

model Order {
  orderId       Int            @id @default(autoincrement())
  userId        Int            
  restaurantId  Int            
  deliveryPartnerId Int?       
  orderItems    OrderItem[]    // Relation - Order will have multiple items
  totalPrice    Int            
  orderStatus   OrderStatus    @default(PENDING)
  deliveryTime  DateTime?      
  userAddress       String     @default("") 
  restaurantAddress String     @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  user          User           @relation(fields: [userId], references: [userId]) // Relation - Order belongs to a User
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [restaurantId]) // Relation - Order belongs to a Restaurant
  deliveryPartner User?        @relation("DeliveryPartner", fields: [deliveryPartnerId], references: [userId]) // Relation - Order belongs to a Delivery Partner
  ratings       Rating[]       // Order can have multiple ratings
}

model OrderItem {
  orderItemId Int       @id @default(autoincrement())
  orderId     Int       
  menuItemId  Int       
  quantity    Int       @default(1)
  itemPrice   Int       
  totalPrice  Int       
  order       Order     @relation(fields: [orderId], references: [orderId], onDelete: Cascade) // Relation - Item belongs to an order
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [itemId]) // Relation - Item references a menu item
}

model Rating {
  ratingId Int @id @default(autoincrement())
  orderId  Int
  userId Int
  ratingType RatingType
  targetId Int
  rating Int @default(0)
  review String? @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  user User @relation(fields: [userId] , references: [userId]) // User who gave the rating
  order Order @relation(fields: [orderId] , references: [orderId]) // Order associated with the rating
  comments Comment[] // One Review can have Multiple Comments
}

model Comment {
  commentId  Int       @id @default(autoincrement())
  ratingId   Int       
  userId     Int       
  comment    String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  rating     Rating    @relation(fields: [ratingId], references: [ratingId]) // Comment belongs to a Review
  user       User      @relation(fields: [userId], references: [userId]) // Comment belongs to a User
  replies    Reply[]   // Relation: One Comment can have multiple replies
}

model Reply {
  replyId    Int       @id @default(autoincrement())
  commentId  Int       
  userId     Int       
  reply      String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  comment    Comment   @relation(fields: [commentId], references: [commentId]) // Reply belongs to a Comment
  user       User      @relation(fields: [userId], references: [userId]) // Reply belongs to a User
}

// model Payment {
//   paymentId     Int           @id @default(autoincrement())
//   userId        Int
//   totalAmount   Int
//   orderId       Int
//   paymentStatus PaymentStatus @default(PENDING)
//   createdAt     DateTime      @default(now())
// }
// enum PaymentStatus {
//   PENDING
//   SUCCESS
//   FAILED
// }
//
// model OrderTracking {
//   trackingId     Int            @id @default(autoincrement())
//   orderId        Int
//   orderStatus    OrderStatus
//   trackingStatus TrackingStatus
//   updatedAt      DateTime       @default(now())
// }
//
// model Notifications {
//   notificationId     Int                @id @default(autoincrement())
//   userId             Int
//   message            String             @db.VarChar(200)
//   notificationStatus NotificationStatus
//   notificationType   NotificationType
//   createdAt          DateTime           @default(now())
//   customer           User?              @relation("CustomerNotifications", fields: [userId], references: [userId])
//   vendor             User?              @relation("VendorNotifications", fields: [userId], references: [userId])
//   courier            User?              @relation("CourierNotifications", fields: [userId], references: [userId])
// }
//
// enum TrackingStatus {
//   Dispatched
//   IN_TRANSIT
//   DELIVERED
// }
//
// enum CourierStatus {
//   AVAILABLE
//   BUSY
//   OFFLINE
// }
//
// enum NotificationStatus {
//   UNREAD
//   READ
// }
//
// enum NotificationType {
//   ORDER_UPDATE
//   PROMOTION
//   GENERAL
// }
